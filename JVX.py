import pandas as pd
import numpy as np
import json
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de A√ß√µes Brasileiras - Modelo SPX FALCON",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para carregar dados
@st.cache_data
def carregar_dados():
    try:
        # Carregar dados das a√ß√µes
        with open('data/acoes_dados.json', 'r') as f:
            dados = json.load(f)
        
        # Carregar resumo
        resumo = pd.read_csv('data/resumo_acoes.csv')
        
        return dados, resumo
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return None, None

# Fun√ß√£o para converter dados hist√≥ricos de volta para DataFrame
def converter_historico_para_df(historico_dict):
    if not historico_dict:
        return pd.DataFrame()
    
    dados = []
    for data_str, valores in historico_dict.items():
        linha = valores.copy()
        linha['date'] = datetime.strptime(data_str, '%Y-%m-%d')
        dados.append(linha)
    
    df = pd.DataFrame(dados)
    df.set_index('date', inplace=True)
    return df

# Fun√ß√£o para criar gr√°fico de pre√ßos
def criar_grafico_precos(df_historico, ticker, preco_justo, preco_compra_forte):
    fig = go.Figure()
    
    # Adicionar linha de pre√ßo
    fig.add_trace(go.Scatter(
        x=df_historico.index,
        y=df_historico['close'],
        mode='lines',
        name='Pre√ßo',
        line=dict(color='royalblue', width=2)
    ))
    
    # Adicionar linhas de pre√ßo justo e compra forte
    ultimo_indice = df_historico.index[-1]
    primeiro_indice = df_historico.index[0]
    
    fig.add_trace(go.Scatter(
        x=[primeiro_indice, ultimo_indice],
        y=[preco_justo, preco_justo],
        mode='lines',
        name='Pre√ßo Justo',
        line=dict(color='green', width=1, dash='dash')
    ))
    
    fig.add_trace(go.Scatter(
        x=[primeiro_indice, ultimo_indice],
        y=[preco_compra_forte, preco_compra_forte],
        mode='lines',
        name='Compra Forte',
        line=dict(color='darkgreen', width=1, dash='dot')
    ))
    
    # Configurar layout
    fig.update_layout(
        title=f'Hist√≥rico de Pre√ßos - {ticker}',
        xaxis_title='Data',
        yaxis_title='Pre√ßo (R$)',
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        height=500
    )
    
    return fig

# Fun√ß√£o para criar gr√°fico de radar para compara√ß√£o setorial
def criar_grafico_radar(df_resumo, ticker, setor):
    # Filtrar a√ß√µes do mesmo setor
    df_setor = df_resumo[df_resumo['Setor'] == setor].copy()
    
    if len(df_setor) <= 1:
        return None
    
    # Normalizar m√©tricas para compara√ß√£o
    metricas = ['Pre√ßo Atual', 'Pre√ßo Justo', 'Potencial']
    df_norm = df_setor.copy()
    
    for metrica in metricas:
        max_val = df_setor[metrica].max()
        min_val = df_setor[metrica].min()
        if max_val != min_val:
            df_norm[f'{metrica}_norm'] = (df_setor[metrica] - min_val) / (max_val - min_val)
        else:
            df_norm[f'{metrica}_norm'] = 0.5
    
    # Criar dados para o gr√°fico radar
    categorias = df_norm['S√≠mbolo'].tolist()
    
    fig = go.Figure()
    
    # Adicionar cada a√ß√£o como um tra√ßo no radar
    for _, acao in df_norm.iterrows():
        valores = [acao['Pre√ßo Atual_norm'], acao['Pre√ßo Justo_norm'], acao['Potencial_norm']]
        
        # Destacar a a√ß√£o selecionada
        if acao['S√≠mbolo'] == ticker.replace('.SA', ''):
            largura = 3
            opacidade = 1.0
        else:
            largura = 1
            opacidade = 0.7
        
        fig.add_trace(go.Scatterpolar(
            r=valores,
            theta=metricas,
            fill='toself',
            name=acao['S√≠mbolo'],
            line=dict(width=largura),
            opacity=opacidade
        ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        ),
        title=f'Compara√ß√£o Setorial - {setor}',
        showlegend=True,
        height=400
    )
    
    return fig

# Fun√ß√£o para criar mapa de calor de recomenda√ß√µes
def criar_mapa_calor(df_resumo):
    # Mapear recomenda√ß√µes para valores num√©ricos
    mapa_recomendacao = {
        'Compra Forte': 5,
        'Compra': 4,
        'Neutro': 3,
        'Venda Parcial': 2,
        'Venda': 1
    }
    
    df_mapa = df_resumo.copy()
    df_mapa['Valor_Recomendacao'] = df_mapa['Recomenda√ß√£o'].map(mapa_recomendacao)
    
    # Agrupar por setor e calcular m√©dia
    df_setor = df_mapa.groupby('Setor')['Valor_Recomendacao'].mean().reset_index()
    df_setor['Recomenda√ß√£o_M√©dia'] = df_setor['Valor_Recomendacao'].apply(
        lambda x: 'Compra Forte' if x >= 4.5 else 
                 ('Compra' if x >= 3.5 else 
                 ('Neutro' if x >= 2.5 else 
                 ('Venda Parcial' if x >= 1.5 else 'Venda')))
    )
    
    # Criar mapa de calor
    fig = px.imshow(
        df_setor.pivot_table(index='Setor', values='Valor_Recomendacao', aggfunc='mean').values,
        labels=dict(x="", y="Setor", color="Score"),
        y=df_setor['Setor'],
        color_continuous_scale=['red', 'yellow', 'green'],
        text_auto=True
    )
    
    fig.update_layout(
        title='Recomenda√ß√£o M√©dia por Setor',
        height=300
    )
    
    return fig, df_setor

# Fun√ß√£o para exibir detalhes da a√ß√£o
def exibir_detalhes_acao(dados, ticker, df_resumo):
    if ticker not in dados:
        st.error(f"Dados n√£o dispon√≠veis para {ticker}")
        return
    
    info = dados[ticker]['info']
    valuation = dados[ticker]['valuation']
    insights = dados[ticker]['insights']
    
    # Converter hist√≥rico para DataFrame
    df_historico = converter_historico_para_df(dados[ticker]['historico'])
    
    # Layout em colunas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Informa√ß√µes b√°sicas
        st.subheader(f"{info['name']} ({ticker.replace('.SA', '')})")
        st.write(f"**Setor:** {valuation['setor']}")
        st.write(f"**M√©todo de Valuation:** {valuation['metodo_valuation']}")
        
        # Gr√°fico de pre√ßos
        fig_precos = criar_grafico_precos(
            df_historico, 
            ticker.replace('.SA', ''), 
            valuation['preco_justo'], 
            valuation['preco_compra_forte']
        )
        st.plotly_chart(fig_precos, use_container_width=True)
    
    with col2:
        # Card de recomenda√ß√£o
        recomendacao = valuation['recomendacao']
        cor_recomendacao = {
            'Compra Forte': 'darkgreen',
            'Compra': 'green',
            'Neutro': 'gray',
            'Venda Parcial': 'orange',
            'Venda': 'red'
        }.get(recomendacao, 'gray')
        
        st.markdown(f"""
        <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
            <h3 style="text-align: center;">Recomenda√ß√£o</h3>
            <h2 style="text-align: center; color: {cor_recomendacao};">{recomendacao}</h2>
            <hr>
            <p><strong>Pre√ßo Atual:</strong> R$ {valuation['preco_atual']:.2f}</p>
            <p><strong>Pre√ßo Justo:</strong> R$ {valuation['preco_justo']:.2f}</p>
            <p><strong>Pre√ßo Compra Forte:</strong> R$ {valuation['preco_compra_forte']:.2f}</p>
            <p><strong>Potencial:</strong> {((valuation['preco_justo'] / valuation['preco_atual'] - 1) * 100):.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Insights t√©cnicos
        if insights and 'technical' in insights:
            st.subheader("An√°lise T√©cnica")
            
            tech_data = []
            if 'short_term' in insights['technical']:
                direction = insights['technical']['short_term']['direction']
                score = insights['technical']['short_term']['score']
                tech_data.append(["Curto Prazo", direction, score])
            
            if 'mid_term' in insights['technical']:
                direction = insights['technical']['mid_term']['direction']
                score = insights['technical']['mid_term']['score']
                tech_data.append(["M√©dio Prazo", direction, score])
            
            if 'long_term' in insights['technical']:
                direction = insights['technical']['long_term']['direction']
                score = insights['technical']['long_term']['score']
                tech_data.append(["Longo Prazo", direction, score])
            
            if tech_data:
                df_tech = pd.DataFrame(tech_data, columns=["Prazo", "Dire√ß√£o", "Score"])
                
                # Formatar cores baseadas na dire√ß√£o
                def highlight_direction(val):
                    if val == 'up':
                        return 'background-color: #c6efce; color: #006100'
                    elif val == 'down':
                        return 'background-color: #ffc7ce; color: #9c0006'
                    return ''
                
                st.dataframe(
                    df_tech.style.applymap(highlight_direction, subset=['Dire√ß√£o']),
                    hide_index=True
                )
    
    # Se√ß√£o de an√°lise comparativa
    st.subheader("An√°lise Comparativa Setorial")
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Gr√°fico de radar para compara√ß√£o setorial
        radar_fig = criar_grafico_radar(df_resumo, ticker.replace('.SA', ''), valuation['setor'])
        if radar_fig:
            st.plotly_chart(radar_fig, use_container_width=True)
        else:
            st.info(f"N√£o h√° a√ß√µes suficientes no setor {valuation['setor']} para compara√ß√£o.")
    
    with col2:
        # Tabela de compara√ß√£o com outras a√ß√µes do mesmo setor
        df_setor = df_resumo[df_resumo['Setor'] == valuation['setor']].copy()
        
        # Destacar a a√ß√£o atual
        def highlight_row(row):
            if row['S√≠mbolo'] == ticker.replace('.SA', ''):
                return ['background-color: #e6f2ff'] * len(row)
            return [''] * len(row)
        
        st.dataframe(
            df_setor.style.apply(highlight_row, axis=1),
            hide_index=True,
            use_container_width=True
        )

# Fun√ß√£o para exibir vis√£o geral de todas as a√ß√µes
def exibir_visao_geral(df_resumo):
    st.subheader("Vis√£o Geral do Mercado")
    
    # Mapa de calor de recomenda√ß√µes por setor
    col1, col2 = st.columns([2, 1])
    
    with col1:
        mapa_calor, df_setor = criar_mapa_calor(df_resumo)
        st.plotly_chart(mapa_calor, use_container_width=True)
    
    with col2:
        st.subheader("Recomenda√ß√£o por Setor")
        
        # Formatar cores baseadas na recomenda√ß√£o
        def highlight_recomendacao(val):
            if val == 'Compra Forte':
                return 'background-color: #006100; color: white'
            elif val == 'Compra':
                return 'background-color: #c6efce; color: #006100'
            elif val == 'Neutro':
                return 'background-color: #ffeb9c; color: #9c6500'
            elif val == 'Venda Parcial':
                return 'background-color: #ffcc99; color: #9c3400'
            elif val == 'Venda':
                return 'background-color: #ffc7ce; color: #9c0006'
            return ''
        
        st.dataframe(
            df_setor[['Setor', 'Recomenda√ß√£o_M√©dia']].style.applymap(
                highlight_recomendacao, subset=['Recomenda√ß√£o_M√©dia']
            ),
            hide_index=True,
            use_container_width=True
        )
    
    # Distribui√ß√£o de recomenda√ß√µes
    st.subheader("Distribui√ß√£o de Recomenda√ß√µes")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Contagem de recomenda√ß√µes
        recomendacoes_count = df_resumo['Recomenda√ß√£o'].value_counts().reset_index()
        recomendacoes_count.columns = ['Recomenda√ß√£o', 'Contagem']
        
        # Ordenar por n√≠vel de recomenda√ß√£o
        ordem = ['Compra Forte', 'Compra', 'Neutro', 'Venda Parcial', 'Venda']
        recomendacoes_count['ordem'] = recomendacoes_count['Recomenda√ß√£o'].apply(lambda x: ordem.index(x) if x in ordem else 999)
        recomendacoes_count = recomendacoes_count.sort_values('ordem').drop('ordem', axis=1)
        
        # Gr√°fico de barras
        cores = {
            'Compra Forte': 'darkgreen',
            'Compra': 'green',
            'Neutro': 'gray',
            'Venda Parcial': 'orange',
            'Venda': 'red'
        }
        
        fig = px.bar(
            recomendacoes_count,
            x='Recomenda√ß√£o',
            y='Contagem',
            color='Recomenda√ß√£o',
            color_discrete_map=cores,
            text='Contagem'
        )
        
        fig.update_layout(
            showlegend=False,
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Tabela de a√ß√µes com maior potencial
        st.subheader("Top 5 A√ß√µes com Maior Potencial")
        top_potencial = df_resumo.sort_values('Potencial', ascending=False).head(5)
        
        def format_potencial(val):
            return f"{val:.2f}%"
        
        top_potencial['Potencial_fmt'] = top_potencial['Potencial'].apply(format_potencial)
        
        st.dataframe(
            top_potencial[['S√≠mbolo', 'Nome', 'Pre√ßo Atual', 'Pre√ßo Justo', 'Potencial_fmt', 'Recomenda√ß√£o', 'Setor']],
            hide_index=True,
            use_container_width=True
        )
    
    # Tabela completa com todas as a√ß√µes
    st.subheader("Todas as A√ß√µes")
    
    # Adicionar formata√ß√£o para potencial e recomenda√ß√£o
    def highlight_recomendacao_row(row):
        rec = row['Recomenda√ß√£o']
        if rec == 'Compra Forte':
            return ['background-color: #c6efce'] * len(row)
        elif rec == 'Compra':
            return ['background-color: #e6f2ff'] * len(row)
        elif rec == 'Venda':
            return ['background-color: #ffc7ce'] * len(row)
        return [''] * len(row)
    
    # Formatar potencial como percentual
    df_display = df_resumo.copy()
    df_display['Potencial'] = df_display['Potencial'].apply(lambda x: f"{x:.2f}%")
    
    st.dataframe(
        df_display.style.apply(highlight_recomendacao_row, axis=1),
        hide_index=True,
        use_container_width=True
    )

# Fun√ß√£o para exibir metodologia
def exibir_metodologia():
    st.subheader("Metodologia de An√°lise e Recomenda√ß√£o")
    
    st.markdown("""
    ### Filosofia de Investimento
    
    O modelo de an√°lise e recomenda√ß√£o de a√ß√µes implementado neste painel √© baseado na filosofia de investimento do fundo SPX FALCON MASTER FI, que adota uma abordagem h√≠brida combinando:
    
    - **An√°lise Fundamentalista (Stock-picking)**: Sele√ß√£o de empresas com base em seus fundamentos e valor intr√≠nseco
    - **An√°lise de Mercado (Market Timing)**: Avalia√ß√£o de momentos de mercado e ajuste da exposi√ß√£o ao risco
    
    Esta abordagem integrada permite identificar oportunidades de investimento considerando tanto o valor das empresas quanto o contexto macroecon√¥mico.
    
    ### M√©todos Quantitativos
    
    O modelo utiliza diversos m√©todos quantitativos para an√°lise e recomenda√ß√£o:
    
    1. **Modelos de Valuation Setoriais**:
       - Financeiro: Gordon Growth e P/VP ajustado
       - Utilities: Fluxo de Caixa Descontado com foco em dividend yield
       - Tecnologia: M√∫ltiplos de Receita (PS Ratio)
       - Commodities: Ciclo de Pre√ßos e EV/EBITDA
       - Consumo: M√∫ltiplos Compar√°veis com ajuste de crescimento
    
    2. **An√°lise T√©cnica**:
       - Tend√™ncias de curto, m√©dio e longo prazo
       - Scores t√©cnicos para ajuste do pre√ßo justo
       - Indicadores de momentum e revers√£o √† m√©dia
    
    3. **Gest√£o de Risco**:
       - Compara√ß√£o setorial para identificar anomalias
       - An√°lise de potencial de valoriza√ß√£o vs. risco
    
    ### Crit√©rios de Recomenda√ß√£o
    
    As recomenda√ß√µes s√£o baseadas na rela√ß√£o entre o pre√ßo atual e o pre√ßo justo calculado:
    
    - **Compra Forte**: Pre√ßo atual < 80% do pre√ßo justo
    - **Compra**: Pre√ßo atual entre 80% e 95% do pre√ßo justo
    - **Neutro**: Pre√ßo atual entre 95% e 105% do pre√ßo justo
    - **Venda Parcial**: Pre√ßo atual entre 105% e 115% do pre√ßo justo
    - **Venda**: Pre√ßo atual > 115% do pre√ßo justo
    
    ### Limita√ß√µes do Modelo
    
    - O modelo √© uma simplifica√ß√£o da abordagem real utilizada por gestores profissionais
    - As recomenda√ß√µes s√£o baseadas em dados hist√≥ricos e podem n√£o refletir eventos futuros
    - Os par√¢metros setoriais s√£o estimativas e podem variar conforme condi√ß√µes de mercado
    - Este painel tem finalidade educacional e n√£o constitui recomenda√ß√£o formal de investimento
    """)

# Fun√ß√£o principal
def main():
    # Carregar dados
    dados, df_resumo = carregar_dados()
    
    if dados is None or df_resumo is None:
        st.error("N√£o foi poss√≠vel carregar os dados. Verifique se os arquivos de dados existem.")
        return
    
    # Sidebar
    st.sidebar.title("An√°lise de A√ß√µes Brasileiras")
    st.sidebar.subheader("Modelo SPX FALCON")
    
    # Op√ß√µes de navega√ß√£o
    pagina = st.sidebar.radio(
        "Navega√ß√£o",
        ["Vis√£o Geral", "An√°lise Individual", "Metodologia"]
    )
    
    # Filtro de a√ß√µes para an√°lise individual
    if pagina == "An√°lise Individual":
        # Extrair tickers dispon√≠veis
        tickers = list(dados.keys())
        tickers_sem_sa = [t.replace('.SA', '') for t in tickers]
        
        # Dropdown para sele√ß√£o de a√ß√£o
        ticker_selecionado = st.sidebar.selectbox(
            "Selecione uma a√ß√£o",
            tickers_sem_sa
        )
        
        # Converter ticker selecionado de volta para formato com .SA
        ticker_completo = f"{ticker_selecionado}.SA"
    
    # Filtros adicionais para vis√£o geral
    if pagina == "Vis√£o Geral":
        st.sidebar.subheader("Filtros")
        
        # Filtro de setor
        setores = sorted(df_resumo['Setor'].unique())
        setor_selecionado = st.sidebar.multiselect(
            "Setor",
            setores,
            default=[]
        )
        
        # Filtro de recomenda√ß√£o
        recomendacoes = sorted(df_resumo['Recomenda√ß√£o'].unique())
        recomendacao_selecionada = st.sidebar.multiselect(
            "Recomenda√ß√£o",
            recomendacoes,
            default=[]
        )
        
        # Aplicar filtros
        if setor_selecionado:
            df_resumo = df_resumo[df_resumo['Setor'].isin(setor_selecionado)]
        
        if recomendacao_selecionada:
            df_resumo = df_resumo[df_resumo['Recomenda√ß√£o'].isin(recomendacao_selecionada)]
    
    # Exibir conte√∫do com base na navega√ß√£o
    if pagina == "Vis√£o Geral":
        st.title("Vis√£o Geral do Mercado")
        st.write("An√°lise comparativa de todas as a√ß√µes monitoradas")
        
        exibir_visao_geral(df_resumo)
    
    elif pagina == "An√°lise Individual":
        st.title(f"An√°lise Individual - {ticker_selecionado}")
        
        exibir_detalhes_acao(dados, ticker_completo, df_resumo)
    
    elif pagina == "Metodologia":
        st.title("Metodologia")
        
        exibir_metodologia()
    
    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style="text-align: center; color: gray; font-size: 0.8em;">
        Desenvolvido com base na filosofia de investimento do SPX FALCON MASTER FI | Dados atualizados em: Maio/2025
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
